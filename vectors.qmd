# Vectors

## Vector basics

R is a statistical software and in statistics a variable scarcely has only one value, but it is generally given as a list of values (measurements). For example, one could have a variable `ages` of the ages of all the employees of a small business. To store this in R, we can use the function `c()` which stands for **concatenate**. To use this function, we pass the values of the vector as a list, separated by a comma. For example

```{r}
ages <- c(25, 33, 45, 37, 28, 23, 42, 58, 29)
ages
```

Now the variable `ages` is a vector. Let's find out the length of this vector.

```{r}
length(ages)
```

### Vector class

We can create vectors with any data type. For example,

```{r}
nvec <- c(1, 2, 3, 4, 5)
typeof(nvec)
cvec <- c("G", "C", "S", "E")
typeof(cvec)
lvec <- c(TRUE, FALSE)
typeof(lvec)
```

It is important to note now that all the elements of a vector must all have the same type. In fact, if we attempt to mix data types in a vector, R will convert them to force them to have all the same data type. For example,

```{r}
v <- c(FALSE, 3, TRUE, 6)
typeof(v)
```

In fact, R will convert `TRUE` as `1` and `FALSE` as `0`.

```{r}
w <- c("A", 1)
typeof(w)
```

In this case, as we could imagine, R converts everything to be a character.

```{r}
w
```

### Vector names

An interesting feature of R is that each element in a vector can be named. Precisely, we can use the function `name()` to assign to each element of a vector a name. For example, imagine the following vector contains a week of temperatures:

```{r}
temp <- c(18, 16, 17, 17, 18, 16, 15)
temp
```

We know that we have 7 temperatures for the 7 days of the week, but which temperature corresponds to which day? Does it start from Monday or from Sunday, or another day of the week? This is where the function `name()` can be used to assign a label to each value of the vector `temp`, as follows:

```{r}
days <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
names(temp) <- days
temp
```

## Operations with vectors

As we have mentioned a couple of times already, R is a statistical software. This means that all aspects of R are centred on working with statistical data. Therefore, performing operations in R is specifically designed to make working with data as simple as possible. In particular, all arithmetic operations are **vectorised**, which means that the operations occur on an element by element basis. for example, take the following two vectors:

```{r}
vec_1 <- c(1, 2, 3)
vec_2 <- c(5, 6, 7)
```

Adding vectors:

```{r}
vec_1 + vec_2
```

Subtracting vectors:

```{r}
vec_1 - vec_2
```

Multiplying vectors:

```{r}
vec_1 * vec_2
```

Dividing vectors:

```{r}
vec_1 / vec_2
```

### Comparison operations with vectors

We can apply comparison operations of a single number to an entire vector. R will apply the comparison to every element of the vector, like so:

```{r}
vec <- c(1, 2, 3, 4, 5, 6)
vec < 3.5
vec == 2
```

### Functions with vectors

Let's come back to the example of the age of the employees of a business, `ages`. Imagine we wish to find the mean of the ages. To do so, we can use the function `mean()`, like so:

`mean(ages)`

Similarly, we could find the median, the standard deviation, the interquartile range (IQR), etc, with similar functions. The following table contains some of the most common mathematical functions in R. A more comprehensive list of functions can be find in the [R Reference Card](https://cran.r-project.org/doc/contrib/Short-refcard.pdf) published on CRAN.

| Function             | Meaning                                                                                       |
|----------------------|-----------------------------------------------------------------------------------------------|
| `sum(x)`             | sum of the elements of `x`                                                                    |
| `min(x)`             | minimum of the elements of `x`                                                                |
| `max(x)`             | maximum of the elements of `x`                                                                |
| `mean(x)`            | mean of the elements of `x`                                                                   |
| `median(x)`          | median of the elements of `x`                                                                 |
| `quantile(x, probs)` | sample quantiles corresponding to the given probabilities (defaults to 0, 0.25, 0.5, 0.75, 1) |
| `var(x)`             | variance of the elements of `x` (calculated on $n-1$)                                         |
| `sd(x)`              | standard deviation of `x` (square root of the variance)                                       |
| `IQR(x)`             | interquartile range of `x`                                                                    |
| `log(x, base)`       | computes the logarithm of `x` with base `base` (default $e$, the natural logarithm)           |

Another very nice function is `summary()` which returns a summary statistics of the vector, i.e. the minimum, lower quartile, median, mean, upper quartile and maximum of the vector. For example,

```{r}
summary(ages)
```

It is interesting to notice that R functions may give different outcomes depending on the type of the variable. We shall come back to the type of a variable, but for the moment let's just say that we consider an employee to be a junior employee if their age is below 33 years. To check whether the ages are below 33 we can use the comparison operators, like so:

```{r}
is_junior <- ages <= 33
is_junior
```

If we now run the `summary` command on the variable `is_junior` we no longer get a five number summary because the variable `is_junior` is not numeric.

```{r}
summary(is_junior)
```

## Vector indexing and slicing

It is sometimes important to be able to access a particular element of a given vector. For example, consider the following vector:

```{r}
vec <- c(5, 10, 15, 20, 25, 30, 35, 40)
```

We can use the square brackets `[ ]` to access the individual elements of the vector. This can be done by **indexing**. In its simplest form, indexing works by using the brackets to pass the index position corresponding to the element as a number. Keep in mind that, unlike python, in R the index position starts at 1. So, for example,

```{r}
vec[3]
```

Sometimes, however, we wish to access multiple elements at the same time. This can be done passing a vector of indices inside the square brackets; like so:

```{r}
vec[c(2, 3, 5)]
```

If we pass a negative index to the vector, R will instead return the vector with *all but* the index passed. For example,

```{r}
vec[-3]
```

### Slicing vectors

We can also use the colon (`:`) to indicate a slice of vector. The colon operator `from:to` creates a vector of numbers that starts from `from` and ends at `to`, increasing by 1 unit every time. So, for example,

```{r}
3:7
```

Notice that if decimal numbers are given, it is possible that the second number is not necessarily part of the list, because the sequence terminates with the bigger number smaller than `to`, like so:

```{r}
3.5:7.2
```

So, using the colon, we can get a slice of a vector, using the following syntax:

`vector[start_index:stop_index]`

For example,

```{r}
vec[2:4]
```

Notice how the elements both at the starting and stopping index are included.

### Indexing with names

We have previously seen that we can assign names to the elements of a vector. For example,

```{r}
vec <- c(5, 10, 15, 20, 25)
names(vec) <- c("a", "b", "c", "d", "e")
vec
```

We can then use the name along with the indexing brackets to grab the individual elements from the vector.

```{r}
vec["c"]
```

Again, we can also pass a vector of names to grab more than one vector at the same time.

```{r}
vec[c("a", "c", "e")]
```

### Comparison operators and selection

As we have mentioned before, talking about the comparison operators with vectors, we can use comparison operators to filter out elements from a vector. Sometimes this is referred to as boolean/logical masking, because we are creating a vector of logicals to filter out results you want.

Let's see an example of this. Take the vector

```{r}
vec <- 1:10
vec
```

We can pass to the brackets a logical statement.

```{r}
vec[vec > 6]
```

Let's break this down to see how it works. First, let's have a look at the vector

```{r}
vec > 6
```

As we can see, it returns a logical vector with the same length as `vec` whose elements says whether it is true or false that the element in that position is greater than 6. When we pass a logical vector, such as this, to another vector through the brackets, R will return only the elements of the vector corresponding to a true value in the logical vector.

To make this more clear, we could even assign a name to this logical vector and pass the name to the vector, like so:

```{r}
filter <- vec > 6
filter
vec[filter]
```

## Two useful functions to generate vectors

Besides the function `c()` we have already seen that the colon operator `from:to` generates a sequence starting at `from` and ending at `to`. Another function that does the same job is `seq(from, to, by = )`. The parameter `by` specifies the increment of the sequence and its default value is 1. So, for example,

```{r}
seq(5, 16, by = 2)
```

Another function that creates a vector is `rep(x, times)` which repeats the vector `x` `times` times.

```{r}
rep(c(1, 2), times = 3)
```

The function `rep` has an alternative parameter `each` which repeats 'each' element of `x` `each` times. For example,

```{r}
rep(c(1, 2), each = 3)
```

## First steps in data simulation

Sometimes instead of generating data with a pattern, we would like to simulate data. R is perfect for this job, as it has a very good implementation of all the most common and important statistical distributions needed. However, before we can simulate data, it is vital to say a few words about **random data generation** and **reproducibility**.

### Random Number Generator (RGN)

According to Wikipedia, **random number generation** is a process by which, often by means of a **random number generator (RGN)**, a sequence of numbers or symbols that cannot be reasonably predicted better than by random chance is generated. True random number generators are generally hardware based (for example by rolling a die). Software typically use a **pseudo-random number generator (PRNG)** which is an algorithm that generates a sequence of numbers that only looks random but that is in fact pre-determined. On Wikipedia there is long list of PRNGs, but for our scope, suffices it to say that the numbers that can be generated by R are in actual facts not random, but they would pass a **random test**, which means that they would look random from a mathematical point of view. If you want to know more about how R generates random numbers, you may wish to type `help("RNG")` on your console.

### Reproducibility

This may look like a disadvantage, but it is actually a very important aspect of simulation. By means of the fact that random numbers are not-random after all, this means that if we "set a seed" we can then reproduce the exact random sequence again. This means that different user can perform the same simulation, obtaining the same result, as long as they use the same PRNG and they set the same seed.

In R the command to set the PRNG seed is `set.seed()`.

This function needs to be assigned a number, the seed, which starts the sequence.

### Simulating random numbers

Let's see an example. Imagine we wish to roll a die. This means that we have a set of six possible outcomes (coded as 1 to 6), and by rolling a fair die we select one of them and all of them have the same probability (1 out of 6) to be selected. This can be done easily by sampling the set 1 to 6, i.e.

```{r}
set.seed(123)
sample(1:6, 1)
```

Imagine now we want to roll our die 10 times. This can be simulated using a similar code: we need to sample 10 times the set 1 to 6, but this sample must be with replacement. Thus we need to add the parameter `replace = TRUE` to the code to ensure that R samples with replacement. Let's also set the same seed.

```{r}
set.seed(123)
sample(1:6, 10, replace = TRUE)
```

We may notice that having set the same seed, the first number is exactly the same as before.

::: callout-caution
A note of caution here: it is a good practice to set the seed **every** time we use a random generator function. In fact, once the seed has been set, the random function will use the PRGN in a specific way and different versions of the same function might use the PRNG in different ways. So once we access the PRNG again, it is good to always maintain control by choosing the seed, to ensure reproducibility.
:::

### Simulating data from a distribution

Suppose now we want to simulate a measurement (e.g. the temperature of a town). In this case we can't sample from a population, but we need to use a statistical distribution. The statistical distribution that models a measurement is called the **normal distribution** and it has two parameters: the **mean** and the **standard deviation**. The mean represents the typical value of this measurement, and the standard deviation represent an approximation of the error made in taking this measurement.

So let's run a simulation of 10 measurements of an average temperature of 18 degrees with a variability of 3 degrees.

```{r}
set.seed(101)
rnorm(10, mean = 18, sd = 3)
```

This is way too accurate: let's just round this to integers.

```{r}
set.seed(101)
round(rnorm(10, mean = 18, sd = 3))
```

Another very common distribution is the so called **uniform distribution** which gives the same probability to all numbers between a minimum and a maximum chosen numbers (defaults are `min = 0` and `max = 1`). Let's simulate 100 values from a uniform distribution:

```{r}
set.seed(111)
runif(100)
```

The table below shows the most common distributions with their syntax and a brief explanation.

| Name                     | Synatx                       | Example of usage                                                                                                                                                                                      |
|--------------------------|------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Normal distribution      | `rnorm(n, mean = 0, sd = 1)` | The normal distribution models measurements with mean `mean` and error `sd`                                                                                                                           |
| Uniform distribution     | `runif(n, min = 0, max = 1)` | The uniform distribution is generally used to generate a sequence of random numbers                                                                                                                   |
| Binomial distribution    | `rbinom(n, size, prob)`      | The binomial distribution models the number of successes in `size` trials with probability of success `prob`                                                                                          |
| Poisson distribution     | `rpois(n, lambda)`           | The Poisson distribution is also called the "count" distribution: it models the number of events occurring at a constant rate in a given time frame. `lambda` is the mean number of events occurring. |
| Exponential distribution | `rexp(n, rate = 1)`          | The exponential distribution models the time to wait until the next event occurs, such as a failure or a success. `rate` is the average rate at which the events occur.                               |
| Geometric distribution   | `rgeom(n, prob)`             | The geometric distribution models the instant of first success in a sequence of trials with probability of success `prob`                                                                             |
