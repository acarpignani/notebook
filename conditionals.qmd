# Conditionals

Control structures in R allow the user to control the flow of execution of a series of R expressions. In other words, control structures alter the otherwise sequential structure of the code. Control structures enable to respond to inputs or to features of the data and execute different R expressions accordingly. In R every line of code is a **statement**. Curly brackets, `{ }`, are used in R to group statements together into a **block** (or **chunk**) of code, so that they are syntactically equivalent to a single statement. A control structure generally has the form

```         
keyword (condition) {
    statement
}
```

Common used control structures are:

-   `if` and `else`, used for testing a condition

-   `for,` to execute a loop a fixed number of times

-   `while`, to execute a loop *while* (as long as) a condition is true

In this section we shall focus on the first type of these statements, which are called **conditional** expressions.

## If clause

The `if` statement is probably the most commonly used control structure in R (as well as in any language). This structure enables to test a condition and act on it, depending on whether a statement is true or false.

The structure of an `if` clause is the following:

```{r}
#| eval: false

if (condition) {
    ## execute some code
}
```

The above code does nothing if the condition `condition` is false. If, on the other hand, the condition `condition` is true, then the statement, i.e. the code inside the curly brackets `{ }`, is executed.

For example, let's say that we have two variables: `hot` and `temp`. Imagine that `hot` starts off as `FALSE` and `temp` represents a temperature, measured in degrees. If the temperature is greater than 70, we want to assign to `hot` the value `TRUE`. We could do this with the following code:

```{r}
hot <- FALSE
temp <- 60

if (temp > 70) {
   hot <- TRUE 
}

hot
```

Let us now repeat the code, changing this time the temperature to 100.

```{r}
temp <- 100

if (temp > 70) {
   hot <- TRUE 
}

hot
```

::: callout-note
Something to keep in mind when coding with control structures is that the code should always carefully formatted so that one can easily read it later. By convention, we align the closing curly brackets with the `if` statement it refers to. However, because we use brackets, we could be sloppy. Quoting Hadley Wickham, "good coding style is like correct punctuation: you can manage without it, but it sure makes things easier to read".

Using a consistent style makes it easier for other to read the code. One important coding style that we should follow is to **put spaces on either** of mathematical operations apart from `^` (i.e. `+`, `-`, `*`, `==`, `<`, `>`, etc) and around the assignment operator (`<-`).

```{r}
#| eval: false

# Strive for:
z <- (a + b)^2 / d

# Avoid:
z<- ( a+b ) ^ 2/d
```

Don't put a space inside or outside brackets for regular function calls, but always put a space after a comma, just like in standard English.

```{r}
#| eval: false

# Strive for:
mean(x, na.rm = TRUE)

# Avoid:
mean(x,na.rm=TRUE)
```
:::

## Else clause

If the condition inside the `if` statement is false, the code inside the `if` clause is skipped. If we wish to execute another block of code when the statement is false, we can use `else` clause. The structure is the following:

```{r}
#| eval: false

if (condition) {
    ## code to execute if condition is true
} else {
    ## code to execute if condition is false
}
```

Notice the alignment of the curly brackets `{ }` and the use of the `else`. For example,

```{r}
temp <- 30

if (temp > 70) {
    print("Hot")
} else {
    print("Not hot")
}
```

## Else if clause

If we wish to have more options to print out, rather than just two options, we can nest `if` clauses using an `else if` clause. For examples

```{r}
temp <- 50

if (temp > 70) {
    print("hot")
} else if (temp > 30) {
    print("warm")
} else {
    print("cold")
}
```

Let's change the value of `temp` and try again:

```{r}
temp <- 100

if (temp > 70) {
    print("hot")
} else if (temp > 30) {
    print("warm")
} else {
    print("cold")
}
```

Note how the code works. The first statement is true if `temp > 70`, in which case, the code returns the text `"Hot"`. If this condition is true, the code inside the `if` clause is execute, and the rest of the code is skipped. R will not even try the `else if` statement, but jump straight at the end of this chunk of code. On the other hand, if the condition in the `if` clause is false, then R moves to the `else if` statement and checks the new statement. If this statement is true, R runs the code inside the `else if` clause, then jumps at the end of the chunk of code. If, instead, this statement is also false, then R moves on and finds the `else` clause and runs this code.
