# Introduction to R {#r-basic}

### R's command line

There are several ways to interact with R. The primary one will be through the *command line*, also known as *console*. The command line in RStudio is in the console panel. The name comes from it being the place where one types in *commands*.

### R scripts

An alternative way to interact with R is by typing all the code in an R script. In RStudio, click File \> New File \> R Script to open a new script. Changing line in the script won't run the code, however. In order to run the line of code you need to press Ctrl + ENTER in Windows and cmd + ENTER in Mac. There are also commands to run the whole script, but let's just keep it simple for the time being.

## Arithmetic with R

In first instance, R is a very powerful and fancy calculator. Typing in the command line numerical expressions with the usual mathematical operations, we get the results we expect:

```{r}
2 + 3
```

The four operations in R are `+`, `-`, `*` and `/` and R follows the usual mathematical rules for the priority of the operations (the one that some people call BIDMAS).

```{r}
5 * 2 - 12 / 4
```

The order of the operations can be altered using brackets, like so:

```{r}
(4 + 5 * 2) / (8 / 2 - 3)
```

Besides the four operations, R has some very useful other operations, such as the integer division `%/%` and the modulo `%%` of two numbers. The integer division gives the quotient of the division and the modulo gives the remainder of the division, like so:

```{r}
25 %/% 4
```

```{r}
25 %% 4
```

In fact, we have 25 = 6 x 4 + 1.

We can also perform powers with R. The syntax is `a ^ n` to produce a to the power of n. For example,

```{r}
3 ^ 4
```

### Logical values in R and logical operations

R is also equipped with two special "values" that represent "true" and "false". These are called the **Boolean values** and denoted in R by `TRUE` or `T`, and `FALSE` or `F`. These two special values can be joined together through the **logical operations** which are: **and**, **or**, and **not**. In R, and is represented by `&`, or by `|` and not by `!`. So, for example, we have:

```{r}
TRUE & FALSE
TRUE | FALSE
!FALSE
```

Again, logical values can be linked together with brackets.

## Variables and assignment

Once started understanding how R works with operations and numbers, we wish to start assigning values to variables and working with variables instead. R provides a special command to assign a value to a variable: `<-`. This is called the **assignment** operator. For example

```{r}
x <- 10
y <- 2.5

x * y
```

You don't have to use a single letter to name a variable. Conversely, it is advisable not to do so, but to use meaningful words that recall the meaning of that variable. For example, to record the height and weight of an individual, we could use

```{r}
height <- 150
weight <- 65
```

::: {.callout-caution title="On the names of variables"}
A variable name must start with a letter, but it can contain also numbers, full stop, and underscore after the first letter. There are several different schools of thought about which is the best way to denote variables. In the past, I would have probably chosen a notation such as `my.variable` to indicate a variable, but after having coded for a long time alongside the magnificent data scientists and software engineers at Posit (former RStudio), I am now more used to a notation like `my_variable` which I do recommend.
:::

We can work with variables joining them together with the usual operations. For example:

```{r}
bank_account <- 100
deposit <-  30

bank_account <- bank_account + deposit

bank_account
```

## R Data Types

Unlike programming languages such as C, Pascal, etc, R doesn't require to state in advance the type of the variables but it assigns the data type automatically. In most simple cases, the user doesn't really need bother about the data types, but in some cases, and especially when one starts working with data frames and working in machine learning, awareness of the variable type is very important, and the ability to change data type is paramount.

R has many different data types. In what follows we shall go through the most important of them.

### Double

The most common data type is **double**, i.e. decimal numbers described using floating point values. Any number is stored in R as a double, unless otherwise specified. So, for example, the following are double.

```{r}
a <- 5
b <- 2.2
```

To see the type of these variable, we can use the command `typeof`. So

```{r}
typeof(a)
typeof(b)
```

### Integer

To tell R that we want the number to be an **integer** we need to add an `L` after the number during the assignment. For example

```{r}
n <- 5L
```

is an integer. To see this, let's use again the `typeof` command:

```{r}
typeof(n)
```

Double and integer are referred to as **numeric** variables.

### Complex

R has also the possibility to store complex numbers. This is done using the key `i` for the imaginary unit. For example:

```{r}
z <- 2 + 3i
w <- 5 + 2i
```

If variables are complex, R knows how to adapt the arithmetic operations to complex numbers. For example,

```{r}
z + w
2 * z
(1 - 2i) * w
```

### Logical

As we have mentioned before, R has two Boolean values (true and false). Their type is **logical**.

```{r}
p <- TRUE
typeof(p)
```

### Character

Another common type is **character**, which is the data type of characters and strings. To assign a character type to a variable, we use the quotation marks: both the single `'` and the double `"` quotation marks work.

```{r}
char <- "Hello, world!"
typeof(char)
```

::: callout-warning
Beside `typeof`, there is another command that shows the type of a variable: `class`.
:::

## Comparison operators

In R we can use comparison operators to compare variables and return a logical value. The comparison operators are

| Operator | Name                      | Syntax   |
|----------|---------------------------|----------|
| `==`     | equal                     | `a == b` |
| `!=`     | different                 | `a != b` |
| `<=`     | smaller than, or equal to | `a <= b` |
| `<`      | smaller than              | `a < b`  |
| `>=`     | greater than, or equal to | `a >= b` |
| `>`      | greater than              | `a > b`  |

For example,

```{r}
5 > 3
6 < 3
```

## Getting help with R

Besides google searching and visiting [Stack Overflow](https://stackoverflow.com/), there are some build-in functions to get help from R. In fact, most of the R functions have documentation and examples. To access the documentation of a function `foo` we can either use `?foo` or `help(foo)`. For example,

```{r}
help(vector)
```

opens the documentation with title **Vectors - Creation, Coercion, etc**.

## Comments in R

R ignores anything after a `#` sign in a line, whether it is at the beginning of a line or in the middle. Unless the sign `#` is escaped, this symbol tells R that whatever comes next is a comment, and therefore R ignores it.

Running code in the console generally doesn't require comments, so comments are hardly ever used in this context. However, when a code is saved into an R script, it easily becomes messy and confusing, and that is when comments are become really helpful. Using code we can separate chunks of codes, write little notes on the work that we have done, recall results, and even sometimes copy some results into the script for future reference. It is good practice to always write comments in the code, and I would encourage everyone to always use them in their scripts.
