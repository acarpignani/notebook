[
  {
    "objectID": "01-r-basics.html",
    "href": "01-r-basics.html",
    "title": "Introduction to R",
    "section": "",
    "text": "There are several ways to interact with R. The primary one will be through the command line, also known as console. The command line in RStudio is in the console panel. The name comes from it being the place where one types in commands.\nIn first instance, R is a very powerful and fancy calculator. Typing in the command line numerical expressions with the usual mathematical operations, we get the results we expect:\n\n2 + 3\n\n[1] 5\n\n\nThe four operations in R are +, -, * and / and R follows the usual mathematical rules for the priority of the operations (the one that some people call BIDMAS).\n\n5 * 2 - 12 / 4\n\n[1] 7\n\n\nThe order of the operations can be altered using brackets, like so:\n\n(4 + 5 * 2) / (8 / 2 - 3)\n\n[1] 14\n\n\nBesides the four operations, R has some very useful other operations, such as the integer division %/% and the modulo %% of two numbers. The integer division gives the quotient of the division and the modulo gives the remainder of the division, like so:\n\n25 %/% 4\n\n[1] 6\n\n\n\n25 %% 4\n\n[1] 1\n\n\nIn fact:\n\n25 = 6 \\times 4 + 1\n\nWe can also perform powers with R. The syntax is a ^ n to produce a^n. For example,\n\n3 ^ 4\n\n[1] 81\n\n\n\n\nR is also equipped with two special “numbers” that represent “TRUE” and “FALSE”. These are TRUE or T and FALSE or F. These two special values can be joined together through the logical operations which are: and, or, and not. In R, and is represented by &, or by | and not by !. So, for example, we have:\n\nTRUE & FALSE\n\n[1] FALSE\n\nTRUE | FALSE\n\n[1] TRUE\n\n!FALSE\n\n[1] TRUE\n\n\nAgain, logical values can be linked together with brackets.\n\n\n\n\nBefore going ahead and introducing variables, it is convenient to start putting our work into an R Script. In RStudio, click File &gt; New File &gt; R Script to open a new script. Changing line in the script won’t run the code, however. In order to run the line of code you may press Ctrl + ENTER in Windows and cmd + ENTER in Mac. There are also commands to run the whole script, but let’s just keep it simple for the time being.\n\n\nOnce started understanding how R works with operations and numbers, we wish to start assigning values to variables and working with variables instead. R provides a special command to assign a value to a variable: &lt;-. This is called the assignment operator. For example\n\nx &lt;- 10\ny &lt;- 2.5\n\nx * y\n\n[1] 25\n\n\nYou don’t have to use a single letter to name a variable. Conversely, it is advisable not to do so, but to use meaningful words that recall the meaning of that variable. For example, to record the height and weight of an individual, we could use\n\nheight &lt;- 150\nweight &lt;- 65\n\n\n\n\n\n\n\nOn the names of variables\n\n\n\nA variable name must start with a letter, but it can contain also numbers, full stop, and underscore after the first letter. There are several different schools of thought about which is the best way to denote variables. In the past, I would have probably chosen a notation such as my.variable to indicate a variable, but after having coded for a long time alongside the magnificent data scientists and software engineers at Posit (former RStudio), I am now more used to a notation like my_variable which I do recommend.\n\n\nWe can work with variables joining them together with the usual operations. For example:\n\nbank_account &lt;- 100\ndeposit &lt;-  30\n\nbank_account &lt;- bank_account + deposit\n\nbank_account\n\n[1] 130\n\n\n\n\n\nR is a statistical software and in statistics a variable scarcely has only one value, but it is generally given as a list of values (measures). For example, one could have a variable age of the ages of all the employees of a small business. To store this in R, we can use the command c which stands for concatenate. For example\n\nages &lt;- c(25, 33, 45, 37, 28, 23, 42, 58, 29)\n\nNow the variable age is a vector. Let’s find out the length of this vector.\n\nlength(ages)\n\n[1] 9\n\n\nWe may also want to find out the average age of the employees of the business. This can be done with the command mean. E.g.\n\nmean(ages)\n\n[1] 35.55556\n\n\nOther statistical operations are median to calculate the median, IQR to find the interquartile range, sd to find the standard deviation and summary to show a five number summary of the variable, i.e. the minimum, lower quartile, median, upper quartile and maximum in the vector. The function summary also shows the mean.\n\nsummary(ages)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  23.00   28.00   33.00   35.56   42.00   58.00 \n\n\nIt is interesting to immediately notice that R functions may give different outcomes depending on the type of the variable. We shall come back to the type of a variable, but for the moment let’s just say that we consider an employee to be a junior employee if their age is below 33 years. To check whether the ages are below 33 we can use the normal order operations &lt; and &gt;.\n\nis_junior &lt;- ages &lt;= 33\nis_junior\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n\n\nIf we now run the summary command on the variable is_junior we no longer get a five number summary because the variable is_junior is not numeric.\n\nsummary(is_junior)\n\n   Mode   FALSE    TRUE \nlogical       4       5"
  },
  {
    "objectID": "01-r-basics.html#rs-command-line",
    "href": "01-r-basics.html#rs-command-line",
    "title": "Introduction to R",
    "section": "",
    "text": "There are several ways to interact with R. The primary one will be through the command line, also known as console. The command line in RStudio is in the console panel. The name comes from it being the place where one types in commands.\nIn first instance, R is a very powerful and fancy calculator. Typing in the command line numerical expressions with the usual mathematical operations, we get the results we expect:\n\n2 + 3\n\n[1] 5\n\n\nThe four operations in R are +, -, * and / and R follows the usual mathematical rules for the priority of the operations (the one that some people call BIDMAS).\n\n5 * 2 - 12 / 4\n\n[1] 7\n\n\nThe order of the operations can be altered using brackets, like so:\n\n(4 + 5 * 2) / (8 / 2 - 3)\n\n[1] 14\n\n\nBesides the four operations, R has some very useful other operations, such as the integer division %/% and the modulo %% of two numbers. The integer division gives the quotient of the division and the modulo gives the remainder of the division, like so:\n\n25 %/% 4\n\n[1] 6\n\n\n\n25 %% 4\n\n[1] 1\n\n\nIn fact:\n\n25 = 6 \\times 4 + 1\n\nWe can also perform powers with R. The syntax is a ^ n to produce a^n. For example,\n\n3 ^ 4\n\n[1] 81\n\n\n\n\nR is also equipped with two special “numbers” that represent “TRUE” and “FALSE”. These are TRUE or T and FALSE or F. These two special values can be joined together through the logical operations which are: and, or, and not. In R, and is represented by &, or by | and not by !. So, for example, we have:\n\nTRUE & FALSE\n\n[1] FALSE\n\nTRUE | FALSE\n\n[1] TRUE\n\n!FALSE\n\n[1] TRUE\n\n\nAgain, logical values can be linked together with brackets."
  },
  {
    "objectID": "01-r-basics.html#r-scripts",
    "href": "01-r-basics.html#r-scripts",
    "title": "Introduction to R",
    "section": "",
    "text": "Before going ahead and introducing variables, it is convenient to start putting our work into an R Script. In RStudio, click File &gt; New File &gt; R Script to open a new script. Changing line in the script won’t run the code, however. In order to run the line of code you may press Ctrl + ENTER in Windows and cmd + ENTER in Mac. There are also commands to run the whole script, but let’s just keep it simple for the time being.\n\n\nOnce started understanding how R works with operations and numbers, we wish to start assigning values to variables and working with variables instead. R provides a special command to assign a value to a variable: &lt;-. This is called the assignment operator. For example\n\nx &lt;- 10\ny &lt;- 2.5\n\nx * y\n\n[1] 25\n\n\nYou don’t have to use a single letter to name a variable. Conversely, it is advisable not to do so, but to use meaningful words that recall the meaning of that variable. For example, to record the height and weight of an individual, we could use\n\nheight &lt;- 150\nweight &lt;- 65\n\n\n\n\n\n\n\nOn the names of variables\n\n\n\nA variable name must start with a letter, but it can contain also numbers, full stop, and underscore after the first letter. There are several different schools of thought about which is the best way to denote variables. In the past, I would have probably chosen a notation such as my.variable to indicate a variable, but after having coded for a long time alongside the magnificent data scientists and software engineers at Posit (former RStudio), I am now more used to a notation like my_variable which I do recommend.\n\n\nWe can work with variables joining them together with the usual operations. For example:\n\nbank_account &lt;- 100\ndeposit &lt;-  30\n\nbank_account &lt;- bank_account + deposit\n\nbank_account\n\n[1] 130\n\n\n\n\n\nR is a statistical software and in statistics a variable scarcely has only one value, but it is generally given as a list of values (measures). For example, one could have a variable age of the ages of all the employees of a small business. To store this in R, we can use the command c which stands for concatenate. For example\n\nages &lt;- c(25, 33, 45, 37, 28, 23, 42, 58, 29)\n\nNow the variable age is a vector. Let’s find out the length of this vector.\n\nlength(ages)\n\n[1] 9\n\n\nWe may also want to find out the average age of the employees of the business. This can be done with the command mean. E.g.\n\nmean(ages)\n\n[1] 35.55556\n\n\nOther statistical operations are median to calculate the median, IQR to find the interquartile range, sd to find the standard deviation and summary to show a five number summary of the variable, i.e. the minimum, lower quartile, median, upper quartile and maximum in the vector. The function summary also shows the mean.\n\nsummary(ages)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  23.00   28.00   33.00   35.56   42.00   58.00 \n\n\nIt is interesting to immediately notice that R functions may give different outcomes depending on the type of the variable. We shall come back to the type of a variable, but for the moment let’s just say that we consider an employee to be a junior employee if their age is below 33 years. To check whether the ages are below 33 we can use the normal order operations &lt; and &gt;.\n\nis_junior &lt;- ages &lt;= 33\nis_junior\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n\n\nIf we now run the summary command on the variable is_junior we no longer get a five number summary because the variable is_junior is not numeric.\n\nsummary(is_junior)\n\n   Mode   FALSE    TRUE \nlogical       4       5"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Data Science",
    "section": "",
    "text": "Introduction\nWelcome to the public repository of the enhancement class on R for Data Science offered at The Bedford Sixth Form. In this page you will find the list of all data set that are going to be used in the course, as well as useful information, and a brief note of all the topics covered in each lesson.\n\nAim of this course\nThe aim of this course is to give a thorough and opinionated introduction to R using the magnificent IDE RStudio, to show how the program excellently performs data analysis on different data sets, to introduce to the use of the meta-package tidyverse to perform exploratory data analysis, clean and reshape the data, and to give an introduction to machine learning algorithms using the meta-package tidymodels.\nIn the second part of the course, when the students have acquired the basic syntax of R, the course will move onto an individual project in which every participant can collect suitable data and analyse the data to answer a statistical question on a topic of their choice, and write a full reproducible report to show their findings. The project may be published on RPubs and can be included in the student’s portfolio, to show potential employers or to university their ability to use the software and to analyse data.\n\n\nPrerequisites to follow this course\nThis course has basically no prerequisites, except the notions of mathematics and statistics from any GCSE Mathematics course. In particular, the learner is assumed to know the following statistical tools: mean, mode, median, range, interquartile range, box-and-whiskers plot, histogram, bar chart. Any other statistical instrument that might be useful will be briefly recalled during the course.\n\n\nInstall R and RStudio\n\nTo install R, it suffices to follow the link to the Comprehensive R Archive Network (CRAN) repository and to install R clicking on the Download R for &lt;your-base-system&gt;.\n\nIn this course we will also assume that you have installed the RStudio IDE. This open-source, integrated desktop environment makes it possible for all R users to have a common R interface, which is greatly enhanced over the R’s basic command line interface.\n\nInstallation of RStudio is straightforward in most cases. The RStudio web site has links to the necessary files to download.\n\n\n\nBibliography\nI am adding below some websites that you might find useful to look for data.\n\nThe UC Irvine Machine Learning Repository (UCI Repository) contains lots of data sets that can be used to do machine learning.\nTidyTuesday is a project of the R community that aims to provide weekly real world data sets to tidy and analyse.\nKaggle is a great place to find little useful challenges to do. We shall see some of these challenges in our course, but you may always want to attempt one of them of your own. If there is a general consensus on a particular challenge, that could also be done as a team.\nThe World Bank contains a wealth of data that can be analysed.\n\nAlso you may wish to check the little publications that I have made on RPubs."
  }
]